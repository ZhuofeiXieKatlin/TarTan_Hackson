The first step I did for this project is creating a DLB trie. I named it as DLB.java. 
I pass a method of add each work from the ac_test to the DLB trie. Then inside the function of the DLB trie. 
I add each character from the dictionary to the trie. Searching for the sibling nodes firstly. Then go further step by step. 
When I finish adding a whole world by using the while loop. I will change the boolean "isWord" from false to true. 
Then the next step in the ac_test is find the specific words with the prefix. I use the recursive function in the DLB/java. 
Also, when I firstly add words from the dictionary and the user_history. I have two different ways adding them. I will count 
frequency when I add user_history. However, as for the dictionary I give all of them with the same frequency. 
I also use the same data structure for adding user_history and the dictionary. Therefore, I am personally farmilia with
the search method and add method which written by myself. The run time of add a word from the dictiony to the DLB should be O(n*log*n)
the run time of finding five words from DLB trie should be O(log*n)